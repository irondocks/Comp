<?php

$char_cnt = 64;

function sequence(string $file)
{
//    global $char_cnt;
//    return
    $c = $file; str_split($file,strlen($file));
    $i = 0;
    $d = "";
    while (strlen($c) > $i)
    {
        // $d <<= 8;
        $d .= decbin(ord($c[$i]));
        $i++;
    }
    // $dcn = decbin($d);
    $dcn = str_split($d,8);
    $bits = "";
    foreach ($dcn as $nnn)
    {
        $dcbn = (strlen($nnn) < 4) ? "1" . str_repeat("0",4-strlen(substr($nnn,0,3))) : "0" . str_repeat("0",9-strlen($nnn));
        $bits .= $dcbn;
    }
    $sequencer_array = str_split($bits,8);
    $sequencer_str = "";
    foreach ($sequencer_array as $c)
    {
        $sequencer_str .= chr(bindec($c));
    }
    return $sequencer_str;
}

// NEEDS FULL REWRITE
function unsequence(int $number, int $max)
{
    global $char_cnt;
    $seq = [];

    while (count($seq) < $char_cnt)
    {
        unshift($seq,$number%128);
        $number >>= 7;
    }

    return implode($seq);
}

function dictionary(string $file, int $chars, &$fout)
{
    $filemark = str_split($file, $chars);

    $rrr = [];
    $num = [];
    foreach ($filemark as $key => $file_i)
    {
        $pair = sequence($file_i);
        if (!in_array($pair,$rrr))
        {
            $rrr[] = $pair;
            $num[] = 130;
        }
        else
        {
            $num[] = array_search($pair, $rrr);
        }
    }

    $y = 0;
    $hhh = "";
    $total_str = "";
    // Write dictionary as collection of strings

    $total_str = implode("",$rrr);

    unset($rrr);

    fwrite($fout, $total_str);

    output($fout, $num);

    echo ".";

    return $fout;
}

function output(&$fout, array $nums)
{
    $order = 0;

    $total_str = "";
    foreach ($nums as $d)
    {
        // When $d == 130, the next vector of the dictionary is used.
        // this slates the tree to use the minimum of alloted bytes
        if ($d == 130) {
            $order++;
        }
        else {

            $total_str .= ($order == 0) ? "?" : "&";

            while ($order > 0)
            {
                $total_str .= chr(($order)%256);
                $order >>= 8;
            }
            
            // if there is a mark here, print '%x'
            $total_str .= ($d == 130) ? "\\" : chr($d);
        }
    }
    fwrite($fout,$total_str);
}

function Decompress(string $filename, string $output = "f.txt")
{

}

$filestr = file_get_contents($argv[1]);
$time = hrtime(true);
//file_put_contents($argv[2].".xiv","");
$fout = fopen($argv[2].".xiv","w");
while (strlen($filestr) > 0)
{
    if (strlen($filestr) > 1500000)
    {
        $fout = dictionary(substr($filestr,0,1500000), $char_cnt, $fout);
        $filestr = substr($filestr,1500000);
    }
    else
    {
        $fout = dictionary($filestr, $char_cnt, $fout);
        $filestr = "";
    }
}
fclose($fout);
echo "This file was compressed in ";
echo date("i:s",((hrtime(true) - $time) / 1000000000));
echo "\ndone\n";
?>
